128*256*256
########################Schedule candidate########################
parallel
evaluation time: 0.0022779000
unroll
evaluation time: 0.0001346950
packing
evaluation time: 0.0001385400
write cache
evaluation time: 0.0001425250
#######################find best schedule#########################
Minimum Value: 0.0001346950
unroll
Numpy running time: 0.002769
speedup= 20.5605107843
##################################################################
best schedule method:  <function Gemm_tv2_reorder2_3_vec1_para1_unrollv1_config_define at 0x7f62419d9d90>
ConfigSpace (len=648, space_map=
   0 tile_x: Split(policy=factors, product=128, num_outputs=2) len=8
   1 tile_y: Split(policy=factors, product=256, num_outputs=2) len=9
   2 tile_k: Split(policy=factors, product=256, num_outputs=2) len=9
)
XGBoost:
 Current/Best:    0.00/   0.00 GFLOPS | Progress: (0/148) | 0.00 snext batch cost time: 0.00018548965454101562
measure batch cost time: 12.331931352615356
update cost time: 4.863739013671875e-05
 Current/Best:   23.22/  41.85 GFLOPS | Progress: (8/148) | 12.98 snext batch cost time: 0.00019884109497070312
measure batch cost time: 12.538145065307617
update cost time: 4.982948303222656e-05
 Current/Best:   18.05/  41.85 GFLOPS | Progress: (16/148) | 25.52 snext batch cost time: 0.00011849403381347656
measure batch cost time: 12.72649359703064
update cost time: 4.8160552978515625e-05
 Current/Best:    1.21/  41.85 GFLOPS | Progress: (24/148) | 38.25 snext batch cost time: 0.00013828277587890625
measure batch cost time: 12.420029878616333
update cost time: 5.173683166503906e-05
 Current/Best:   31.25/  55.97 GFLOPS | Progress: (32/148) | 50.67 snext batch cost time: 0.00020575523376464844
measure batch cost time: 12.473864316940308
update cost time: 4.673004150390625e-05
 Current/Best:   21.61/  55.97 GFLOPS | Progress: (40/148) | 63.15 snext batch cost time: 0.00018405914306640625
measure batch cost time: 12.97029161453247
update cost time: 5.0067901611328125e-05
 Current/Best:   16.47/  55.97 GFLOPS | Progress: (48/148) | 76.12 snext batch cost time: 0.0001823902130126953
measure batch cost time: 12.813268661499023
update cost time: 4.9114227294921875e-05
 Current/Best:   27.88/  55.97 GFLOPS | Progress: (56/148) | 88.93 snext batch cost time: 0.0001270771026611328
measure batch cost time: 7.724938631057739
fit count: 1
fit cost time: 0.4866788387298584
find maximums count: 1
predict cost time: 0.18518567085266113
points shape: (128,)
scores shape: (128,)
sa while
predict cost time: 0.13826608657836914
predict cost time: 0.12087678909301758
predict cost time: 0.08992838859558105
predict cost time: 0.0850987434387207
predict cost time: 0.07107400894165039
predict cost time: 0.04193830490112305
predict cost time: 0.04620099067687988
predict cost time: 0.03450179100036621
predict cost time: 0.03376173973083496
predict cost time: 0.01881694793701172
predict cost time: 0.019962787628173828
predict cost time: 0.015422821044921875
predict cost time: 0.012455463409423828
predict cost time: 0.01958465576171875
predict cost time: 0.01686835289001465
predict cost time: 0.010379791259765625
predict cost time: 0.010456085205078125
predict cost time: 0.020492076873779297
predict cost time: 0.010445594787597656
predict cost time: 0.013891220092773438
predict cost time: 0.00035309791564941406
predict cost time: 0.005639314651489258
predict cost time: 0.005321979522705078
predict cost time: 0.011370182037353516
predict cost time: 0.010280609130859375
predict cost time: 0.005599260330200195
predict cost time: 0.0003306865692138672
predict cost time: 0.006019115447998047
predict cost time: 0.0003523826599121094
predict cost time: 0.00035572052001953125
predict cost time: 0.005420684814453125
predict cost time: 0.010900735855102539
predict cost time: 0.0003516674041748047
predict cost time: 0.00032830238342285156
predict cost time: 0.00031876564025878906
predict cost time: 0.00035572052001953125
predict cost time: 0.00033354759216308594
predict cost time: 0.00036072731018066406
predict cost time: 0.0003440380096435547
predict cost time: 0.005601644515991211
predict cost time: 0.00032782554626464844
predict cost time: 0.00032806396484375
predict cost time: 0.005574703216552734
predict cost time: 0.005614757537841797
predict cost time: 0.00033736228942871094
predict cost time: 0.0003917217254638672
predict cost time: 0.0003230571746826172
predict cost time: 0.003057241439819336
predict cost time: 0.0016469955444335938
predict cost time: 0.00999903678894043
predict cost time: 0.011239290237426758
predict cost time: 0.00043272972106933594
predict cost time: 0.006129741668701172
predict cost time: 0.010962486267089844
predict cost time: 0.0003447532653808594
predict cost time: 0.020921707153320312
predict cost time: 0.00033926963806152344
predict cost time: 0.0003407001495361328
predict cost time: 0.0003261566162109375
predict cost time: 0.0003218650817871094
find maxmums cost time: 1.3217506408691406
2:maxmums: [314, 386, 315, 323, 394, 385, 393, 316, 313, 379, 306, 321, 307, 243, 308, 458, 388, 377, 395, 380, 242, 251, 250, 324, 244, 235, 305, 171, 236, 164, 249, 326, 318, 450, 312, 384, 320, 300, 529, 459, 241, 299, 169, 390, 371, 392, 234, 451, 449, 456, 170, 298, 370, 325, 521, 465, 522, 252, 163, 309, 372, 389, 178, 317]
update cost time: 1.8086814880371094
 Current/Best:    1.42/  55.97 GFLOPS | Progress: (64/148) | 98.47 snext batch cost time: 9.775161743164062e-05
measure batch cost time: 4.350395679473877
update cost time: 7.319450378417969e-05
 Current/Best:   53.78/  55.97 GFLOPS | Progress: (72/148) | 102.82 snext batch cost time: 0.00010132789611816406
measure batch cost time: 4.401917934417725
update cost time: 0.00013017654418945312
 Current/Best:   43.70/  55.97 GFLOPS | Progress: (80/148) | 107.23 snext batch cost time: 0.00013780593872070312
measure batch cost time: 4.174858570098877
update cost time: 6.341934204101562e-05
 Current/Best:   50.98/  62.44 GFLOPS | Progress: (88/148) | 111.41 snext batch cost time: 9.608268737792969e-05
measure batch cost time: 3.73891544342041
update cost time: 7.152557373046875e-05
 Current/Best:   22.74/  62.44 GFLOPS | Progress: (96/148) | 115.15 snext batch cost time: 0.00015234947204589844
measure batch cost time: 6.507569074630737
update cost time: 7.390975952148438e-05
 Current/Best:   53.90/  62.44 GFLOPS | Progress: (104/148) | 121.66 snext batch cost time: 0.00011086463928222656
measure batch cost time: 3.895355701446533
update cost time: 6.866455078125e-05
 Current/Best:   38.64/  62.44 GFLOPS | Progress: (112/148) | 125.55 snext batch cost time: 0.00015497207641601562
measure batch cost time: 6.226918935775757
update cost time: 6.29425048828125e-05
 Current/Best:   39.27/  62.44 GFLOPS | Progress: (120/148) | 131.78 snext batch cost time: 0.0001494884490966797
measure batch cost time: 13.1201012134552
fit count: 2
fit cost time: 0.3549351692199707
find maximums count: 2
predict cost time: 0.0004284381866455078
points shape: (128,)
scores shape: (128,)
sa while
predict cost time: 0.011508941650390625
predict cost time: 0.0003361701965332031
predict cost time: 0.0003871917724609375
predict cost time: 0.006191253662109375
predict cost time: 0.00033354759216308594
predict cost time: 0.0003237724304199219
predict cost time: 0.005303382873535156
predict cost time: 0.00032067298889160156
predict cost time: 0.0003185272216796875
predict cost time: 0.00031948089599609375
predict cost time: 0.00033283233642578125
predict cost time: 0.00032138824462890625
predict cost time: 0.00196075439453125
predict cost time: 0.0003635883331298828
predict cost time: 0.005899667739868164
predict cost time: 0.0003795623779296875
predict cost time: 0.007988691329956055
predict cost time: 0.0003998279571533203
predict cost time: 0.00032401084899902344
predict cost time: 0.0003235340118408203
predict cost time: 0.00041365623474121094
predict cost time: 0.00034117698669433594
predict cost time: 0.0003333091735839844
predict cost time: 0.005742073059082031
predict cost time: 0.0005245208740234375
predict cost time: 0.00033283233642578125
predict cost time: 0.005592823028564453
predict cost time: 0.009032011032104492
predict cost time: 0.0003814697265625
predict cost time: 0.00032067298889160156
predict cost time: 0.00031495094299316406
predict cost time: 0.0003256797790527344
predict cost time: 0.00031495094299316406
predict cost time: 0.0003833770751953125
predict cost time: 0.000316619873046875
predict cost time: 0.00031495094299316406
predict cost time: 0.00034332275390625
predict cost time: 0.00032639503479003906
predict cost time: 0.00034809112548828125
predict cost time: 0.00037670135498046875
predict cost time: 0.0003407001495361328
predict cost time: 0.00032448768615722656
predict cost time: 0.000316619873046875
predict cost time: 0.0003135204315185547
predict cost time: 0.006031036376953125
predict cost time: 0.00032830238342285156
predict cost time: 0.00031828880310058594
predict cost time: 0.005899667739868164
predict cost time: 0.00032258033752441406
predict cost time: 0.00031948089599609375
predict cost time: 0.005315542221069336
predict cost time: 0.0033905506134033203
predict cost time: 0.001958131790161133
predict cost time: 0.00032329559326171875
predict cost time: 0.00033354759216308594
predict cost time: 0.00032591819763183594
predict cost time: 0.00032782554626464844
predict cost time: 0.0003190040588378906
predict cost time: 0.00032830238342285156
predict cost time: 0.00032901763916015625
predict cost time: 0.00032401084899902344
predict cost time: 0.0003261566162109375
predict cost time: 0.00031375885009765625
predict cost time: 0.0003228187561035156
predict cost time: 0.0003173351287841797
predict cost time: 0.0003628730773925781
predict cost time: 0.0003352165222167969
predict cost time: 0.0005350112915039062
predict cost time: 0.00033664703369140625
predict cost time: 0.0003216266632080078
predict cost time: 0.00031256675720214844
predict cost time: 0.00032782554626464844
predict cost time: 0.008785486221313477
predict cost time: 0.0005857944488525391
predict cost time: 0.00033783912658691406
predict cost time: 0.00032401084899902344
predict cost time: 0.0003209114074707031
predict cost time: 0.0003352165222167969
predict cost time: 0.00042724609375
predict cost time: 0.0003228187561035156
predict cost time: 0.0003132820129394531
predict cost time: 0.000316619873046875
predict cost time: 0.0003871917724609375
find maxmums cost time: 0.33038759231567383
2:maxmums: [460, 466, 452, 396, 467, 531, 530, 523, 524, 317, 532, 389, 402, 331, 258, 248, 461, 401, 462, 220, 162, 464, 397, 259, 332, 178, 253, 528, 179, 526, 256, 76, 468, 233, 453, 148, 227, 91, 292, 77, 92, 376, 381, 155, 533, 398, 20, 4, 218, 156, 19, 291, 237, 185, 222, 177, 219, 328, 221, 27, 240, 5, 78, 448]
update cost time: 0.6855349540710449
 Current/Best:    1.87/  62.44 GFLOPS | Progress: (128/148) | 145.59 snext batch cost time: 9.965896606445312e-05
measure batch cost time: 6.857177019119263
update cost time: 6.628036499023438e-05
 Current/Best:   33.23/  65.50 GFLOPS | Progress: (136/148) | 152.45 snext batch cost time: 9.72747802734375e-05
measure batch cost time: 7.027578353881836
update cost time: 6.771087646484375e-05
 Current/Best:   30.14/  65.50 GFLOPS | Progress: (144/148) | 159.48 snext batch cost time: 0.00011897087097167969
measure batch cost time: 4.621208190917969
update cost time: 4.1484832763671875e-05
 Current/Best:   69.78/  69.78 GFLOPS | Progress: (148/148) | 164.10 s Done.
fea type: itervar
feature_cache type: <class 'tvm.autotvm.tuner.model_based_tuner.FeatureCache'>
feature cache context type: <class 'dict'>
feature_cache_context len: 599
feature_cache_context keys: dict_keys([104, 346, 642, 598, 330, 608, 260, 297, 612, 216, 457, 618, 136, 303, 445, 535, 422, 96, 210, 10, 420, 437, 482, 66, 349, 387, 327, 479, 180, 32, 98, 329, 6, 577, 350, 548, 336, 197, 547, 99, 112, 65, 573, 267, 565, 49, 189, 224, 440, 534, 132, 245, 334, 638, 569, 228, 172, 378, 123, 446, 15, 322, 23, 140, 3, 517, 7, 519, 522, 524, 525, 14, 529, 530, 532, 20, 24, 536, 26, 540, 29, 30, 543, 541, 33, 544, 37, 566, 575, 576, 579, 69, 74, 75, 591, 82, 83, 594, 595, 97, 609, 613, 105, 625, 114, 626, 628, 121, 634, 122, 636, 640, 137, 141, 146, 147, 162, 163, 174, 183, 190, 191, 193, 198, 215, 218, 230, 248, 249, 254, 255, 258, 259, 261, 263, 270, 285, 286, 291, 296, 299, 306, 308, 316, 317, 319, 328, 339, 340, 342, 345, 356, 381, 382, 385, 389, 391, 399, 401, 406, 411, 417, 419, 430, 435, 439, 442, 448, 453, 462, 472, 483, 485, 487, 488, 490, 497, 506, 508, 11, 518, 54, 2, 511, 538, 521, 21, 22, 601, 533, 100, 17, 246, 392, 28, 556, 27, 102, 537, 181, 545, 325, 553, 561, 432, 68, 587, 67, 507, 590, 80, 621, 108, 481, 138, 630, 196, 265, 130, 632, 643, 208, 142, 117, 178, 202, 179, 471, 182, 551, 414, 234, 393, 403, 279, 275, 282, 574, 512, 300, 314, 348, 320, 332, 326, 353, 352, 383, 365, 94, 388, 617, 408, 416, 203, 428, 443, 88, 256, 474, 486, 456, 491, 281, 515, 46, 578, 513, 170, 318, 397, 386, 78, 505, 321, 312, 309, 9, 531, 0, 70, 606, 81, 227, 166, 580, 611, 116, 582, 124, 225, 646, 592, 644, 76, 143, 176, 464, 186, 206, 498, 18, 465, 295, 262, 251, 195, 126, 354, 526, 363, 514, 307, 324, 103, 335, 610, 310, 380, 149, 454, 101, 470, 150, 409, 424, 131, 43, 95, 469, 441, 461, 294, 362, 247, 554, 5, 602, 13, 73, 323, 344, 528, 86, 369, 581, 593, 629, 44, 641, 292, 64, 333, 154, 106, 160, 169, 194, 188, 239, 272, 250, 177, 222, 370, 211, 278, 558, 394, 156, 371, 425, 90, 165, 366, 377, 429, 438, 421, 359, 173, 460, 478, 501, 546, 4, 555, 244, 562, 204, 315, 1, 311, 129, 510, 240, 35, 62, 19, 219, 221, 412, 516, 358, 77, 187, 273, 426, 274, 232, 351, 418, 243, 427, 395, 305, 31, 45, 158, 542, 361, 390, 384, 290, 480, 50, 503, 523, 220, 288, 236, 368, 242, 127, 61, 214, 355, 185, 84, 38, 374, 301, 92, 184, 238, 111, 550, 313, 357, 152, 372, 157, 360, 404, 148, 171, 241, 42, 477, 48, 499, 41, 217, 155, 268, 376, 53, 410, 72, 85, 36, 596, 293, 134, 343, 283, 570, 331, 252, 604, 151, 226, 8, 489, 212, 153, 405, 276, 159, 509, 110, 585, 298, 164, 496, 168, 55, 467, 338, 398, 449, 396, 436, 433, 25, 563, 264, 484, 302, 458, 34, 266, 466, 39, 364, 459, 93, 233, 468, 450, 402, 289, 253, 444, 304, 588, 373, 337, 379, 451, 452, 125, 237, 235, 347, 622, 603, 145, 589, 504, 434, 586, 597, 79, 91, 375, 367, 229, 520, 161, 223, 52, 199, 89, 455, 571, 107, 620, 413, 192, 269, 144, 619, 539, 205, 113, 400, 109, 118, 552, 614, 475, 527, 284, 257, 463, 133, 280, 119, 341, 231, 473, 476, 175, 167, 599, 502, 209, 407, 47, 201, 12, 500, 492, 549, 564, 572, 583, 60])
task config space map: OrderedDict([('tile_x', Split(policy=factors, product=128, num_outputs=2) len=8), ('tile_y', Split(policy=factors, product=256, num_outputs=2) len=9), ('tile_k', Split(policy=factors, product=256, num_outputs=2) len=9)])
trails [460, 466, 452, 396, 467, 531, 530, 523, 524, 317, 532, 389, 402, 331, 258, 248, 461, 401, 462, 220, 162, 464, 397, 259, 332, 178, 253, 528, 179, 526, 256, 76, 468, 233, 453, 148, 227, 91, 292, 77, 92, 376, 381, 155, 533, 398, 20, 4, 218, 156, 19, 291, 237, 185, 222, 177, 219, 328, 221, 27, 240, 5, 78, 448]
plan size: 64
diversity_filter_ratio: None
space ConfigSpace (len=648, space_map=
   0 tile_x: Split(policy=factors, product=128, num_outputs=2) len=8
   1 tile_y: Split(policy=factors, product=256, num_outputs=2) len=9
   2 tile_k: Split(policy=factors, product=256, num_outputs=2) len=9
)
task: Task(func_name=Gemm_tv2_reorder2_3_vec1_para1_unrollv1_config_define, args=(256, 256, 128, 'float32'), kwargs={}, workload=None)
task config space: ConfigSpace (len=648, space_map=
   0 tile_x: Split(policy=factors, product=128, num_outputs=2) len=8
   1 tile_y: Split(policy=factors, product=256, num_outputs=2) len=9
   2 tile_k: Split(policy=factors, product=256, num_outputs=2) len=9
)
flops max: 69777141906.50473
best_iter 147
tuner param: {}
tuner dims: [8, 9, 9]
xs: [104, 346, 642, 598, 330, 608, 260, 297, 612, 216, 457, 618, 136, 303, 445, 535, 422, 96, 210, 10, 420, 437, 482, 66, 349, 387, 327, 479, 180, 32, 98, 329, 6, 577, 350, 548, 336, 197, 547, 99, 112, 65, 573, 267, 565, 49, 189, 224, 440, 534, 132, 245, 334, 638, 569, 228, 172, 378, 123, 446, 15, 322, 23, 140, 314, 386, 315, 323, 394, 385, 393, 316, 313, 379, 306, 321, 307, 243, 308, 458, 388, 377, 395, 380, 242, 251, 250, 324, 244, 235, 305, 171, 236, 164, 249, 326, 318, 450, 312, 384, 320, 300, 529, 459, 241, 299, 169, 390, 371, 392, 234, 451, 449, 456, 170, 298, 370, 325, 521, 465, 522, 252, 163, 309, 372, 47, 201, 353, 460, 466, 452, 396, 467, 531, 530, 523, 524, 317, 532, 389, 402, 331, 258, 248, 461, 401, 462, 220]
ys: [21258509883.426254, 0.0, 0.0, 17810964372.160175, 41850967870.684494, 0.0, 26753653324.828575, 23215276470.91382, 0.0, 9738568343.820383, 33826396225.65426, 0.0, 8133540179.956564, 9312501248.90374, 18089032647.604263, 18047779690.189327, 0.0, 20672288622.19375, 1488191485.209641, 16961759948.236816, 0.0, 12426094685.074362, 0.0, 1208343128.442693, 0.0, 55968828396.05018, 25186476911.067078, 0.0, 23687264923.47659, 14474597094.247162, 27789730338.567543, 31252963749.487724, 30635483164.122414, 8099379169.844841, 0.0, 0.0, 15931265786.724909, 2217671349.487921, 0.0, 21608985059.24781, 19101484652.518444, 1190383398.2784116, 0.0, 5561999734.783186, 0.0, 3756115558.898859, 7101406972.216108, 16466654888.797281, 17280065918.220207, 33131671866.977364, 1283254346.808465, 24036814808.44723, 26180038699.207294, 0.0, 0.0, 27883951602.180557, 31314797670.59878, 36018067840.274796, 4125003933.910307, 12580961950.89761, 5479348117.182141, 46412570543.3219, 4930472910.225817, 1421588342.0580356, 45844398294.89562, 48719990707.39924, 44337251585.62368, 53502187639.51783, 53142907823.88343, 36101773110.690315, 37737226146.02547, 53783471180.355194, 36231192502.05157, 41201414538.31041, 31948082416.117607, 35658269925.61105, 40701639980.59195, 41828012964.348045, 42847114107.671875, 43695218251.901245, 62438466691.47748, 27918288015.442474, 61123637423.49169, 41859321357.28542, 39422002913.67076, 37704998202.08558, 37462522329.40336, 50975984443.36412, 42877775506.03148, 41203438282.82332, 30633245690.914402, 32119339893.555927, 40591348108.00349, 32075127136.46618, 32227930385.33943, 22743216570.87084, 28080902487.195797, 34665101863.71338, 32205659001.036587, 30197660102.95547, 32387197405.505577, 28356177534.394753, 34379540983.60656, 53904433877.39365, 33671609200.016052, 26858156437.101784, 31425069303.963436, 27241046957.199455, 20659560634.420254, 31687409813.772522, 36673113578.73568, 38644713686.82914, 26316375956.832726, 31032139686.29772, 30155323891.005825, 23638538056.18959, 16873733757.090559, 33142143731.97424, 24467996733.169994, 39274348050.00234, 29444043524.043526, 35365126475.548065, 33010420273.886356, 23866530101.285988, 22012144112.9392, 4880616258.232679, 1865138140.955803, 0.0, 56401586767.9688, 52540448452.96255, 41726064464.78313, 62784282613.576836, 65500179589.2871, 52330679975.04679, 45464245840.33386, 33234055703.022858, 36399409875.900375, 44466514709.780014, 57641778327.492615, 41558622739.658165, 47219859273.85308, 46466559574.585945, 33013018496.65486, 30144487566.479805, 50781572734.42702, 34340134272.14671, 31726959152.798786, 69777141906.50473]
x_train: [[7.011227 1.       7.011227 ... 1.       0.       0.      ]
 [5.044394 1.       5.044394 ... 1.       0.       0.      ]
 [5.044394 1.       5.044394 ... 1.       0.       0.      ]
 ...
 [1.       1.       1.       ... 1.       0.       0.      ]
 [6.022368 1.       6.022368 ... 1.       0.       0.      ]
 [6.022368 1.       6.022368 ... 1.       0.       0.      ]]
x_train shape: (128, 252)
y_train: [0.34047136 0.         0.         0.28525627 0.67027539 0.
 0.42848031 0.37181048 0.         0.15597065 0.54175572 0.
 0.13026489 0.14914686 0.28970975 0.28904905 0.         0.33108258
 0.02383453 0.27165561 0.         0.19901345 0.         0.01935254
 0.         0.89638377 0.40338077 0.         0.37936974 0.23182179
 0.44507388 0.50054022 0.49065079 0.12971778 0.         0.
 0.25515146 0.03551771 0.         0.34608449 0.30592495 0.0190649
 0.         0.0890797  0.         0.06015708 0.11373449 0.26372613
 0.27675353 0.53062917 0.0205523  0.38496805 0.41929343 0.
 0.         0.4465829  0.50153054 0.57685702 0.06606511 0.20149377
 0.08775597 0.74333296 0.07896531 0.02276783 0.73423325 0.78028807
 0.71009514 0.85687863 0.85112449 0.57819762 0.60439066 0.8613836
 0.58027038 0.6598723  0.51167308 0.57109458 0.65186803 0.66990775
 0.68622944 0.69981248 1.         0.44713283 0.978942   0.67040918
 0.63137365 0.60387451 0.59999107 0.81641954 0.68672051 0.65990471
 0.49061496 0.5144159  0.65010162 0.5137078  0.51615506 0.36425008
 0.44973722 0.55518823 0.51579836 0.48363872 0.51870584 0.45414596
 0.55061475 0.86332091 0.53927668 0.430154   0.50329662 0.43628629
 0.33087873 0.50749821 0.58734808 0.61892477 0.42147697 0.49700355
 0.48296067 0.37858934 0.27024581 0.53079689 0.39187376 0.62900885
 0.47156897 0.56639966 0.52868723 0.38224081 0.35254139 0.07816682
 0.02987162 0.        ]
y_train shape: (128,)
feas: [[4.087463 1.       4.087463 ... 1.       0.       0.      ]
 [5.044394 1.       5.044394 ... 1.       0.       0.      ]
 [5.044394 1.       5.044394 ... 1.       0.       0.      ]
 ...
 [3.169925 1.       3.169925 ... 1.       0.       0.      ]
 [3.169925 1.       3.169925 ... 1.       0.       0.      ]
 [4.087463 1.       4.087463 ... 1.       0.       0.      ]]
feas shape: (128, 252)
predict count: 145
space get(index = 64) [('tile_x', [-1, 1]), ('tile_y', [-1, 256]), ('tile_k', [-1, 1])],,None,64
myTuner rets: [[[('tile_x', [-1, 1]), ('tile_y', [-1, 16]), ('tile_k', [-1, 2])],,None,104, [('tile_x', [-1, 4]), ('tile_y', [-1, 128]), ('tile_k', [-1, 16])],,None,346, [('tile_x', [-1, 4]), ('tile_y', [-1, 256]), ('tile_k', [-1, 256])],,None,642, [('tile_x', [-1, 64]), ('tile_y', [-1, 4]), ('tile_k', [-1, 256])],,None,598, [('tile_x', [-1, 4]), ('tile_y', [-1, 32]), ('tile_k', [-1, 16])],,None,330, [('tile_x', [-1, 1]), ('tile_y', [-1, 16]), ('tile_k', [-1, 256])],,None,608, [('tile_x', [-1, 16]), ('tile_y', [-1, 32]), ('tile_k', [-1, 8])],,None,260, [('tile_x', [-1, 2]), ('tile_y', [-1, 2]), ('tile_k', [-1, 16])],,None,297], [[('tile_x', [-1, 16]), ('tile_y', [-1, 16]), ('tile_k', [-1, 256])],,None,612, [('tile_x', [-1, 1]), ('tile_y', [-1, 1]), ('tile_k', [-1, 8])],,None,216, [('tile_x', [-1, 2]), ('tile_y', [-1, 8]), ('tile_k', [-1, 64])],,None,457, [('tile_x', [-1, 4]), ('tile_y', [-1, 32]), ('tile_k', [-1, 256])],,None,618, [('tile_x', [-1, 1]), ('tile_y', [-1, 256]), ('tile_k', [-1, 2])],,None,136, [('tile_x', [-1, 128]), ('tile_y', [-1, 2]), ('tile_k', [-1, 16])],,None,303, [('tile_x', [-1, 32]), ('tile_y', [-1, 2]), ('tile_k', [-1, 64])],,None,445, [('tile_x', [-1, 128]), ('tile_y', [-1, 8]), ('tile_k', [-1, 128])],,None,535], [[('tile_x', [-1, 64]), ('tile_y', [-1, 128]), ('tile_k', [-1, 32])],,None,422, [('tile_x', [-1, 1]), ('tile_y', [-1, 8]), ('tile_k', [-1, 2])],,None,96, [('tile_x', [-1, 4]), ('tile_y', [-1, 256]), ('tile_k', [-1, 4])],,None,210, [('tile_x', [-1, 4]), ('tile_y', [-1, 2]), ('tile_k', [-1, 1])],,None,10, [('tile_x', [-1, 16]), ('tile_y', [-1, 128]), ('tile_k', [-1, 32])],,None,420, [('tile_x', [-1, 32]), ('tile_y', [-1, 1]), ('tile_k', [-1, 64])],,None,437, [('tile_x', [-1, 4]), ('tile_y', [-1, 64]), ('tile_k', [-1, 64])],,None,482, [('tile_x', [-1, 4]), ('tile_y', [-1, 256]), ('tile_k', [-1, 1])],,None,66], [[('tile_x', [-1, 32]), ('tile_y', [-1, 128]), ('tile_k', [-1, 16])],,None,349, [('tile_x', [-1, 8]), ('tile_y', [-1, 8]), ('tile_k', [-1, 32])],,None,387, [('tile_x', [-1, 128]), ('tile_y', [-1, 16]), ('tile_k', [-1, 16])],,None,327, [('tile_x', [-1, 128]), ('tile_y', [-1, 32]), ('tile_k', [-1, 64])],,None,479, [('tile_x', [-1, 16]), ('tile_y', [-1, 16]), ('tile_k', [-1, 4])],,None,180, [('tile_x', [-1, 1]), ('tile_y', [-1, 16]), ('tile_k', [-1, 1])],,None,32, [('tile_x', [-1, 4]), ('tile_y', [-1, 8]), ('tile_k', [-1, 2])],,None,98, [('tile_x', [-1, 2]), ('tile_y', [-1, 32]), ('tile_k', [-1, 16])],,None,329], [[('tile_x', [-1, 64]), ('tile_y', [-1, 1]), ('tile_k', [-1, 1])],,None,6, [('tile_x', [-1, 2]), ('tile_y', [-1, 1]), ('tile_k', [-1, 256])],,None,577, [('tile_x', [-1, 64]), ('tile_y', [-1, 128]), ('tile_k', [-1, 16])],,None,350, [('tile_x', [-1, 16]), ('tile_y', [-1, 32]), ('tile_k', [-1, 128])],,None,548, [('tile_x', [-1, 1]), ('tile_y', [-1, 64]), ('tile_k', [-1, 16])],,None,336, [('tile_x', [-1, 32]), ('tile_y', [-1, 64]), ('tile_k', [-1, 4])],,None,197, [('tile_x', [-1, 8]), ('tile_y', [-1, 32]), ('tile_k', [-1, 128])],,None,547, [('tile_x', [-1, 8]), ('tile_y', [-1, 8]), ('tile_k', [-1, 2])],,None,99], [[('tile_x', [-1, 1]), ('tile_y', [-1, 32]), ('tile_k', [-1, 2])],,None,112, [('tile_x', [-1, 2]), ('tile_y', [-1, 256]), ('tile_k', [-1, 1])],,None,65, [('tile_x', [-1, 32]), ('tile_y', [-1, 256]), ('tile_k', [-1, 128])],,None,573, [('tile_x', [-1, 8]), ('tile_y', [-1, 64]), ('tile_k', [-1, 8])],,None,267, [('tile_x', [-1, 32]), ('tile_y', [-1, 128]), ('tile_k', [-1, 128])],,None,565, [('tile_x', [-1, 2]), ('tile_y', [-1, 64]), ('tile_k', [-1, 1])],,None,49, [('tile_x', [-1, 32]), ('tile_y', [-1, 32]), ('tile_k', [-1, 4])],,None,189, [('tile_x', [-1, 1]), ('tile_y', [-1, 2]), ('tile_k', [-1, 8])],,None,224], [[('tile_x', [-1, 1]), ('tile_y', [-1, 2]), ('tile_k', [-1, 64])],,None,440, [('tile_x', [-1, 64]), ('tile_y', [-1, 8]), ('tile_k', [-1, 128])],,None,534, [('tile_x', [-1, 16]), ('tile_y', [-1, 128]), ('tile_k', [-1, 2])],,None,132, [('tile_x', [-1, 32]), ('tile_y', [-1, 8]), ('tile_k', [-1, 8])],,None,245, [('tile_x', [-1, 64]), ('tile_y', [-1, 32]), ('tile_k', [-1, 16])],,None,334, [('tile_x', [-1, 64]), ('tile_y', [-1, 128]), ('tile_k', [-1, 256])],,None,638, [('tile_x', [-1, 2]), ('tile_y', [-1, 256]), ('tile_k', [-1, 128])],,None,569, [('tile_x', [-1, 16]), ('tile_y', [-1, 2]), ('tile_k', [-1, 8])],,None,228], [[('tile_x', [-1, 16]), ('tile_y', [-1, 8]), ('tile_k', [-1, 4])],,None,172, [('tile_x', [-1, 4]), ('tile_y', [-1, 4]), ('tile_k', [-1, 32])],,None,378, [('tile_x', [-1, 8]), ('tile_y', [-1, 64]), ('tile_k', [-1, 2])],,None,123, [('tile_x', [-1, 64]), ('tile_y', [-1, 2]), ('tile_k', [-1, 64])],,None,446, [('tile_x', [-1, 128]), ('tile_y', [-1, 2]), ('tile_k', [-1, 1])],,None,15, [('tile_x', [-1, 4]), ('tile_y', [-1, 16]), ('tile_k', [-1, 16])],,None,322, [('tile_x', [-1, 128]), ('tile_y', [-1, 4]), ('tile_k', [-1, 1])],,None,23, [('tile_x', [-1, 16]), ('tile_y', [-1, 256]), ('tile_k', [-1, 2])],,None,140], [[('tile_x', [-1, 4]), ('tile_y', [-1, 8]), ('tile_k', [-1, 16])],,None,314, [('tile_x', [-1, 4]), ('tile_y', [-1, 8]), ('tile_k', [-1, 32])],,None,386, [('tile_x', [-1, 8]), ('tile_y', [-1, 8]), ('tile_k', [-1, 16])],,None,315, [('tile_x', [-1, 8]), ('tile_y', [-1, 16]), ('tile_k', [-1, 16])],,None,323, [('tile_x', [-1, 4]), ('tile_y', [-1, 16]), ('tile_k', [-1, 32])],,None,394, [('tile_x', [-1, 2]), ('tile_y', [-1, 8]), ('tile_k', [-1, 32])],,None,385, [('tile_x', [-1, 2]), ('tile_y', [-1, 16]), ('tile_k', [-1, 32])],,None,393, [('tile_x', [-1, 16]), ('tile_y', [-1, 8]), ('tile_k', [-1, 16])],,None,316], [[('tile_x', [-1, 2]), ('tile_y', [-1, 8]), ('tile_k', [-1, 16])],,None,313, [('tile_x', [-1, 8]), ('tile_y', [-1, 4]), ('tile_k', [-1, 32])],,None,379, [('tile_x', [-1, 4]), ('tile_y', [-1, 4]), ('tile_k', [-1, 16])],,None,306, [('tile_x', [-1, 2]), ('tile_y', [-1, 16]), ('tile_k', [-1, 16])],,None,321, [('tile_x', [-1, 8]), ('tile_y', [-1, 4]), ('tile_k', [-1, 16])],,None,307, [('tile_x', [-1, 8]), ('tile_y', [-1, 8]), ('tile_k', [-1, 8])],,None,243, [('tile_x', [-1, 16]), ('tile_y', [-1, 4]), ('tile_k', [-1, 16])],,None,308, [('tile_x', [-1, 4]), ('tile_y', [-1, 8]), ('tile_k', [-1, 64])],,None,458], [[('tile_x', [-1, 16]), ('tile_y', [-1, 8]), ('tile_k', [-1, 32])],,None,388, [('tile_x', [-1, 2]), ('tile_y', [-1, 4]), ('tile_k', [-1, 32])],,None,377, [('tile_x', [-1, 8]), ('tile_y', [-1, 16]), ('tile_k', [-1, 32])],,None,395, [('tile_x', [-1, 16]), ('tile_y', [-1, 4]), ('tile_k', [-1, 32])],,None,380, [('tile_x', [-1, 4]), ('tile_y', [-1, 8]), ('tile_k', [-1, 8])],,None,242, [('tile_x', [-1, 8]), ('tile_y', [-1, 16]), ('tile_k', [-1, 8])],,None,251, [('tile_x', [-1, 4]), ('tile_y', [-1, 16]), ('tile_k', [-1, 8])],,None,250, [('tile_x', [-1, 16]), ('tile_y', [-1, 16]), ('tile_k', [-1, 16])],,None,324], [[('tile_x', [-1, 16]), ('tile_y', [-1, 8]), ('tile_k', [-1, 8])],,None,244, [('tile_x', [-1, 8]), ('tile_y', [-1, 4]), ('tile_k', [-1, 8])],,None,235, [('tile_x', [-1, 2]), ('tile_y', [-1, 4]), ('tile_k', [-1, 16])],,None,305, [('tile_x', [-1, 8]), ('tile_y', [-1, 8]), ('tile_k', [-1, 4])],,None,171, [('tile_x', [-1, 16]), ('tile_y', [-1, 4]), ('tile_k', [-1, 8])],,None,236, [('tile_x', [-1, 16]), ('tile_y', [-1, 4]), ('tile_k', [-1, 4])],,None,164, [('tile_x', [-1, 2]), ('tile_y', [-1, 16]), ('tile_k', [-1, 8])],,None,249, [('tile_x', [-1, 64]), ('tile_y', [-1, 16]), ('tile_k', [-1, 16])],,None,326], [[('tile_x', [-1, 64]), ('tile_y', [-1, 8]), ('tile_k', [-1, 16])],,None,318, [('tile_x', [-1, 4]), ('tile_y', [-1, 4]), ('tile_k', [-1, 64])],,None,450, [('tile_x', [-1, 1]), ('tile_y', [-1, 8]), ('tile_k', [-1, 16])],,None,312, [('tile_x', [-1, 1]), ('tile_y', [-1, 8]), ('tile_k', [-1, 32])],,None,384, [('tile_x', [-1, 1]), ('tile_y', [-1, 16]), ('tile_k', [-1, 16])],,None,320, [('tile_x', [-1, 16]), ('tile_y', [-1, 2]), ('tile_k', [-1, 16])],,None,300, [('tile_x', [-1, 2]), ('tile_y', [-1, 8]), ('tile_k', [-1, 128])],,None,529, [('tile_x', [-1, 8]), ('tile_y', [-1, 8]), ('tile_k', [-1, 64])],,None,459], [[('tile_x', [-1, 2]), ('tile_y', [-1, 8]), ('tile_k', [-1, 8])],,None,241, [('tile_x', [-1, 8]), ('tile_y', [-1, 2]), ('tile_k', [-1, 16])],,None,299, [('tile_x', [-1, 2]), ('tile_y', [-1, 8]), ('tile_k', [-1, 4])],,None,169, [('tile_x', [-1, 64]), ('tile_y', [-1, 8]), ('tile_k', [-1, 32])],,None,390, [('tile_x', [-1, 8]), ('tile_y', [-1, 2]), ('tile_k', [-1, 32])],,None,371, [('tile_x', [-1, 1]), ('tile_y', [-1, 16]), ('tile_k', [-1, 32])],,None,392, [('tile_x', [-1, 4]), ('tile_y', [-1, 4]), ('tile_k', [-1, 8])],,None,234, [('tile_x', [-1, 8]), ('tile_y', [-1, 4]), ('tile_k', [-1, 64])],,None,451], [[('tile_x', [-1, 2]), ('tile_y', [-1, 4]), ('tile_k', [-1, 64])],,None,449, [('tile_x', [-1, 1]), ('tile_y', [-1, 8]), ('tile_k', [-1, 64])],,None,456, [('tile_x', [-1, 4]), ('tile_y', [-1, 8]), ('tile_k', [-1, 4])],,None,170, [('tile_x', [-1, 4]), ('tile_y', [-1, 2]), ('tile_k', [-1, 16])],,None,298, [('tile_x', [-1, 4]), ('tile_y', [-1, 2]), ('tile_k', [-1, 32])],,None,370, [('tile_x', [-1, 32]), ('tile_y', [-1, 16]), ('tile_k', [-1, 16])],,None,325, [('tile_x', [-1, 2]), ('tile_y', [-1, 4]), ('tile_k', [-1, 128])],,None,521, [('tile_x', [-1, 2]), ('tile_y', [-1, 16]), ('tile_k', [-1, 64])],,None,465], [[('tile_x', [-1, 4]), ('tile_y', [-1, 4]), ('tile_k', [-1, 128])],,None,522, [('tile_x', [-1, 16]), ('tile_y', [-1, 16]), ('tile_k', [-1, 8])],,None,252, [('tile_x', [-1, 8]), ('tile_y', [-1, 4]), ('tile_k', [-1, 4])],,None,163, [('tile_x', [-1, 32]), ('tile_y', [-1, 4]), ('tile_k', [-1, 16])],,None,309, [('tile_x', [-1, 16]), ('tile_y', [-1, 2]), ('tile_k', [-1, 32])],,None,372, [('tile_x', [-1, 128]), ('tile_y', [-1, 32]), ('tile_k', [-1, 1])],,None,47, [('tile_x', [-1, 2]), ('tile_y', [-1, 128]), ('tile_k', [-1, 4])],,None,201, [('tile_x', [-1, 2]), ('tile_y', [-1, 256]), ('tile_k', [-1, 16])],,None,353], [[('tile_x', [-1, 16]), ('tile_y', [-1, 8]), ('tile_k', [-1, 64])],,None,460, [('tile_x', [-1, 4]), ('tile_y', [-1, 16]), ('tile_k', [-1, 64])],,None,466, [('tile_x', [-1, 16]), ('tile_y', [-1, 4]), ('tile_k', [-1, 64])],,None,452, [('tile_x', [-1, 16]), ('tile_y', [-1, 16]), ('tile_k', [-1, 32])],,None,396, [('tile_x', [-1, 8]), ('tile_y', [-1, 16]), ('tile_k', [-1, 64])],,None,467, [('tile_x', [-1, 8]), ('tile_y', [-1, 8]), ('tile_k', [-1, 128])],,None,531, [('tile_x', [-1, 4]), ('tile_y', [-1, 8]), ('tile_k', [-1, 128])],,None,530, [('tile_x', [-1, 8]), ('tile_y', [-1, 4]), ('tile_k', [-1, 128])],,None,523], [[('tile_x', [-1, 16]), ('tile_y', [-1, 4]), ('tile_k', [-1, 128])],,None,524, [('tile_x', [-1, 32]), ('tile_y', [-1, 8]), ('tile_k', [-1, 16])],,None,317, [('tile_x', [-1, 16]), ('tile_y', [-1, 8]), ('tile_k', [-1, 128])],,None,532, [('tile_x', [-1, 32]), ('tile_y', [-1, 8]), ('tile_k', [-1, 32])],,None,389, [('tile_x', [-1, 4]), ('tile_y', [-1, 32]), ('tile_k', [-1, 32])],,None,402, [('tile_x', [-1, 8]), ('tile_y', [-1, 32]), ('tile_k', [-1, 16])],,None,331, [('tile_x', [-1, 4]), ('tile_y', [-1, 32]), ('tile_k', [-1, 8])],,None,258, [('tile_x', [-1, 1]), ('tile_y', [-1, 16]), ('tile_k', [-1, 8])],,None,248], [[('tile_x', [-1, 32]), ('tile_y', [-1, 8]), ('tile_k', [-1, 64])],,None,461, [('tile_x', [-1, 2]), ('tile_y', [-1, 32]), ('tile_k', [-1, 32])],,None,401, [('tile_x', [-1, 64]), ('tile_y', [-1, 8]), ('tile_k', [-1, 64])],,None,462, [('tile_x', [-1, 16]), ('tile_y', [-1, 1]), ('tile_k', [-1, 8])],,None,220]]
